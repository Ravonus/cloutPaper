import { LibrarySceneCreationAttributes } from './../models/LibraryScene';
/**
 * @author Chad Koslovsky <chad@technomnancy.it>
 * @file Description
 * @desc Created on 2021-06-26 10:46:56 pm
 * @copyright TechnomancyIT
 */
import { BrowserWindow, screen, ipcMain } from 'electron';
import path from 'path';
import wallpaper from 'electron-wallpaper-napi';
import globalKeys from 'iohook';
import keycode from 'keycode';
import LibraryScene from '../models/LibraryScene';
import Scene from '../models/Scene';
import { asyncForEach } from '../functions';
import Library from '../models/Library';
import { ioHookHandle } from '../libs/IoHookHandle';
//Configuration is auto generated by YML script inside craco.config.js

interface WallpaperProps {}

interface BrowserWindowExtended extends BrowserWindow {
  displayId?: number;
  index?: string;
}

const displays = screen.getAllDisplays();

export const displayWindows: BrowserWindowExtended[] = [];

export default async (opts?: {
  Scene: Scene;
  LibraryScenes: LibraryScene;
  items: Library[];
}) => {
  displayWindows.map(function (window, i) {
    window.close();
    delete displayWindows[i];
  });

  const scenes = await Scene.findAll({ where: { enabled: true } });
  const scene = opts ? opts.Scene : scenes[scenes.length - 1];
  const libraryScenes = opts
    ? opts.LibraryScenes
    : await LibraryScene.findAll({
        where: { sceneId: scene?.id },
      });

  await asyncForEach(libraryScenes, async (scene: LibraryScene, i: number) => {
    const library = opts ? opts.items[i] : await scene.$get('library');

    if (!scene.monitors?.toString()) return;
    let displayIndex =
      typeof scene?.monitors === 'string'
        ? scene.monitors.split(',')
        : [scene.monitors.toString()];

    if (!displayIndex || typeof displayIndex === 'string') return;

    displayIndex.map((i) => {
      const display = displays[Number(i)];

      let window: null | BrowserWindowExtended = new BrowserWindow({
        webPreferences: {
          nodeIntegrationInSubFrames: true,
          webviewTag: true,
          nodeIntegration: true,
          enableRemoteModule: true,
          contextIsolation: false,
          webSecurity: false,
        },
        fullscreen: true,
        type: 'desktop',
        transparent: true,
        frame: false,
      });

      window.setBounds(display.bounds);
      window.setKiosk(true);
      //  window.webContents.openDevTools();
      window.webContents.on('did-navigate', () => {
        setTimeout(() => {
          wallpaper.attachWindow(window);
        }, 100);
      });

      let url = library?.path;

      //  console.log(url, displayIndex);

      console.log('RAN', url, library);

      window?.loadURL(
        `file://${__dirname}/index.html?url=${url}&displayIndex=${i}&bg=background-color: rgba(255, 255, 255, 0) !important; background: rgba(255, 255, 255, 0) !important;`
      );

      window.displayId = display.id;

      window.index = i;

      displayWindows.push(window);
    });
  });

  ioHookHandle();
};

ipcMain.handle('setWallpaper', (event, { url, display, bg }) => {
  displayWindows[display]?.loadURL(
    `file://${__dirname}/index.html?url=${url}&displayIndex=${display}&bg=${bg}`
  );

  return true;
});
