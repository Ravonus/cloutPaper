/**
 * @author Chad Koslovsky <chad@technomnancy.it>
 * @file Description
 * @desc Created on 2021-06-26 10:46:56 pm
 * @copyright TechnomancyIT
 */
import { BrowserWindow, screen, ipcMain } from 'electron';
import path from 'path';
import wallpaper from 'electron-wallpaper-napi';
import globalKeys from 'iohook';
import keycode from 'keycode';
//Configuration is auto generated by YML script inside craco.config.js

interface WallpaperProps {}

interface BrowserWindowExtended extends BrowserWindow {
  displayId?: number;
}

const displays = screen.getAllDisplays();

function capitalizeFirstLetter(string: string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

function grabWindowByDisplayId(
  display: Electron.Display,
  adjustedPoint: Electron.Point
) {
  let index = 0;
  let { x, y } = adjustedPoint;
  let found = false;
  displayWindows.map((window, i) => {
    if (window.displayId === display.id) {
      index = i;
      found = true;
    } else if (!found) {
      const size = window.getSize();

      x = x - size[0];
    }
  });

  return { window: displayWindows[index], point: { x, y } };
}

function grabDisplay() {
  const adjustedPoint = screen.getCursorScreenPoint();
  const mousePointerDisplay = screen.getDisplayNearestPoint(adjustedPoint);

  return { mousePointerDisplay, adjustedPoint };
}

const displayWindows: BrowserWindowExtended[] = [];

export default () => {
  displays.map((display, i) => {
    let window: null | BrowserWindowExtended = new BrowserWindow({
      webPreferences: {
        nodeIntegrationInSubFrames: true,
        webviewTag: true,

        nodeIntegration: true,
        enableRemoteModule: true,
        contextIsolation: false,
        webSecurity: false,
      },
      fullscreen: true,
      type: 'desktop',
      transparent: true,
      frame: false,
    });

    window.setBounds(display.bounds);
    window.setKiosk(true);
    //window.webContents.openDevTools();
    window.webContents.on('did-navigate', () => {
      setTimeout(() => {
        wallpaper.attachWindow(window);
      }, 100);
    });
    let url = 'http://html5wallpaper.com/wp-depo/264/';
    window?.loadURL(
      `file://${__dirname}/index.html?url=${url}&displayIndex=${i}`
    );

    window.displayId = display.id;

    displayWindows.push(window);
  });

  let mainWindow: null | BrowserWindow = new BrowserWindow({
    webPreferences: {
      nodeIntegrationInSubFrames: true,
      webviewTag: true,

      nodeIntegration: true,
      enableRemoteModule: true,
      contextIsolation: false,
      webSecurity: false,
    },
    fullscreen: true,
    type: 'desktop',
    transparent: true,
    frame: false,
  });

  //mainWindow.webContents.openDevTools();

  const dir = path.join(__dirname, '../renderer/', 'wallpaper/');
  let url = 'http://html5wallpaper.com/wp-depo/264/';

  mainWindow.hide();
  mainWindow.webContents.on('did-navigate', () => {
    setTimeout(() => {
      wallpaper.attachWindow(mainWindow);
    }, 100);
  });

  ipcMain.handle('setWallpaper', (event, { url, display }) => {
    displayWindows[display]?.loadURL(
      `file://${__dirname}/index.html?url=${url}&displayIndex=${display}`
    );

    return true;
  });

  globalKeys.on('mousemove', (event: any) => {
    const { mousePointerDisplay, adjustedPoint } = grabDisplay();

    const { window, point } = grabWindowByDisplayId(
      mousePointerDisplay,
      adjustedPoint
    );

    window?.webContents.send('mousemove', point);
  });

  globalKeys.on('mousedrag', (event: any) => {
    const { mousePointerDisplay, adjustedPoint } = grabDisplay();

    const { window, point } = grabWindowByDisplayId(
      mousePointerDisplay,
      adjustedPoint
    );
    window?.webContents.send('mousemove', point);
  });

  globalKeys.on('mouseup', (event: any) => {
    if (event.button === 1) {
      const { mousePointerDisplay, adjustedPoint } = grabDisplay();

      const { window, point } = grabWindowByDisplayId(
        mousePointerDisplay,
        adjustedPoint
      );

      window?.webContents.send('mouseup', point);
    }
  });

  globalKeys.on('mousedown', (event: any) => {
    if (event.button === 1) {
      const { mousePointerDisplay, adjustedPoint } = grabDisplay();

      const { window, point } = grabWindowByDisplayId(
        mousePointerDisplay,
        adjustedPoint
      );
      window.getPosition;

      window?.webContents.send('mousedown', point);
    }
  });

  // globalKeys.on('keyup', (event: any) => {

  //   // mainWindow?.webContents.sendInputEvent({
  //   //   type: 'keyUp',
  //   //   keyCode: event.keycode,
  //   // });

  //   mainWindow?.webContents.send('keyup', event);
  // });

  globalKeys.on('keydown', (event: any) => {
    const { mousePointerDisplay, adjustedPoint } = grabDisplay();

    const { window } = grabWindowByDisplayId(
      mousePointerDisplay,
      adjustedPoint
    );

    try {
      let key =
        keycode(event.rawcode).length > 1
          ? capitalizeFirstLetter(keycode(event.rawcode))
          : keycode(event.rawcode);

      if (key === 'Space') key = ' ';

      window?.webContents.send('keydown', key);
    } catch (e) {
      console.log(e);
    }
  });

  //Register and start hook
  globalKeys.start(false);

  // setTimeout(() => {
  //   wallpaper.attachWindow(mainWindow);
  // }, 5000);
  //wallpaper.attachWindow(mainWindow);
  // mainWindow?.loadURL(`file://${dir}index.html`);
};
